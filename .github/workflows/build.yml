---
name: build
'on': [push, pull_request]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  linux:
    name: linux
    runs-on: ubuntu-20.04
    env:
      CMAKE_OPTS: >-
        -DUSE_WERROR=ON
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DUSE_COMPILE_CACHE=ON
      CCACHE_MAXSIZE: 0
      CCACHE_NOCOMPRESS: 1
      MAKEFLAGS: -j2
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Print versions
        run: |
          apt-get --version
          dpkg --version
      - name: Print all packages
        run: dpkg -l
      - name: Checksum
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get clean
          apt-get download libwine-dev:i386
          md5sum libwine-dev_*_i386.deb
          apt-get download libwine-dev:amd64
          md5sum libwine-dev_*_amd64.deb
      - name: diff
        run: |
          dpkg-deb -R libwine-dev_*amd64.deb tmp_amd64/
          dpkg-deb -R libwine-dev_*i386.deb tmp_i386/
          diff -r tmp_amd64/ tmp_i386/ >&2
      - name: Install wine - part 1
        run: >
          sudo dpkg --add-architecture i386 &&
          sudo apt-get update &&
          sudo apt-get install aptitude --yes &&
          sudo aptitude install --safe-resolver -y
          libwine-dev:amd64
          libwine-dev:i386
      - name: Print info - 1
        run: |
          lsb_release -a
          dpkg -l | grep wine
          dpkg-query -s libwine-dev:amd64
          dpkg-query -s libwine-dev:i386
      - name: Install wine - part 2
        run: >
          sudo aptitude install --safe-resolver -y
          g++-multilib
          gcc-multilib
          libc6-dev
          libc6-dev-i386
          wine64-tools
      - name: Print info - 2
        run: |
          dpkg -l | grep wine
          dpkg-query -s libwine-dev:amd64
          dpkg-query -s libwine-dev:i386
      - name: Install dependencies
        run: >
          sudo apt-get install --yes
          ccache
          libasound2-dev
          libfftw3-dev
          libfltk1.3-dev
          libfluidsynth-dev
          libgig-dev
          libjack-jackd2-dev
          liblilv-dev
          liblist-moreutils-perl
          libmp3lame-dev
          libogg-dev
          libqt5x11extras5-dev
          libsamplerate0-dev
          libsdl2-dev
          libsndfile1-dev
          libstk0-dev
          libvorbis-dev
          libwine-dev
          libwine-dev:i386
          libx11-xcb-dev
          libxcb-keysyms1-dev
          libxcb-util0-dev
          libxft-dev
          libxinerama-dev
          libxml-perl
          libxml2-utils
          lv2-dev
          portaudio19-dev
          qt5-qmake
          qtbase5-dev
          qtbase5-dev-tools
          qtbase5-private-dev
          qttools5-dev-tools
          stk
      - name: Cache ccache data
        uses: actions/cache@v3
        with:
          key: ccache-${{ github.job }}-${{ github.ref }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ github.job }}-${{ github.ref }}-
            ccache-${{ github.job }}-
          path: ~/.ccache
      - name: Configure
        run: |
          ccache --zero-stats
          source /opt/qt5*/bin/qt5*-env.sh || true
          mkdir build && cd build
          cmake .. $CMAKE_OPTS -DCMAKE_INSTALL_PREFIX=./install
      - name: Build
        run: cmake --build build
      - name: Run tests
        run: |
          cd build/tests
          ctest --output-on-failure -j2
      - name: Package
        run: |
          cmake --build build --target install
          cmake --build build --target appimage
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux
          path: build/lmms-*.AppImage
      - name: Trim ccache and print statistics
        run: |
          ccache --cleanup
          echo "[ccache config]"
          ccache --show-config
          echo "[ccache stats]"
          ccache --show-stats
        env:
          CCACHE_MAXSIZE: 500M
  macos:
    name: macos
    runs-on: macos-12
    env:
      CMAKE_OPTS: >-
        -DUSE_WERROR=ON
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DUSE_COMPILE_CACHE=ON
      CCACHE_MAXSIZE: 0
      CCACHE_NOCOMPRESS: 1
      MAKEFLAGS: -j3
      DEVELOPER_DIR: /Applications/Xcode_13.1.app/Contents/Developer
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Clean up Homebrew download cache
        run: rm -rf ~/Library/Caches/Homebrew/downloads
      - name: Restore Homebrew download cache
        uses: actions/cache/restore@v3
        with:
          key: n/a - only restore from restore-keys
          restore-keys: |
            homebrew-
          path: ~/Library/Caches/Homebrew/downloads
      - name: Cache ccache data
        uses: actions/cache@v3
        with:
          key: ccache-${{ github.job }}-${{ github.ref }}-${{ github.run_id }}
          restore-keys: |
            ccache-${{ github.job }}-${{ github.ref }}-
            ccache-${{ github.job }}-
          path: ~/Library/Caches/ccache
      - name: Install dependencies
        run: |
          brew bundle install --verbose
          npm update -g npm
          npm install --location=global appdmg
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_UPGRADE: 1
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
      - name: Configure
        run: |
          ccache --zero-stats
          mkdir build
          cmake -S . \
                -B build \
                -DCMAKE_INSTALL_PREFIX="../target" \
                -DCMAKE_PREFIX_PATH="$(brew --prefix qt5)" \
                $CMAKE_OPTS \
                -DUSE_WERROR=OFF
      - name: Build
        run: cmake --build build
      - name: Run tests
        run: |
          cd build/tests
          ctest --output-on-failure -j3
      - name: Package
        run: |
          cmake --build build --target install
          cmake --build build --target dmg
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: build/lmms-*.dmg
      - name: Trim ccache and print statistics
        run: |
          ccache --cleanup
          echo "[ccache config]"
          ccache --show-config
          echo "[ccache stats]"
          ccache --show-stats --verbose
        env:
          CCACHE_MAXSIZE: 500MB
      - name: Save Homebrew download cache
        uses: actions/cache/save@v3
        with:
          key: homebrew-${{ hashFiles('Brewfile.lock.json') }}
          path: ~/Library/Caches/Homebrew/downloads
  mingw:
    strategy:
      fail-fast: false
      matrix:
        arch: ['32', '64']
    name: mingw${{ matrix.arch }}
    runs-on: ubuntu-latest
    container: lmmsci/linux.mingw${{ matrix.arch }}:18.04
    env:
      CMAKE_OPTS: >-
        -DUSE_WERROR=ON
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DUSE_COMPILE_CACHE=ON
      CCACHE_MAXSIZE: 0
      CCACHE_NOCOMPRESS: 1
      MAKEFLAGS: -j2
    steps:
      - name: Update and configure Git
        run: |
          add-apt-repository ppa:git-core/ppa
          apt-get update
          apt-get --yes install git
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Cache ccache data
        uses: actions/cache@v3
        with:
          key: "ccache-${{ github.job }}-${{ matrix.arch }}-${{ github.ref }}\
            -${{ github.run_id }}"
          restore-keys: |
            ccache-${{ github.job }}-${{ matrix.arch }}-${{ github.ref }}-
            ccache-${{ github.job }}-${{ matrix.arch }}-
          path: ~/.ccache
      - name: Configure
        run: |
          ccache --zero-stats
          mkdir build && cd build
          ../cmake/build_win${{ matrix.arch }}.sh
      - name: Build
        run: cmake --build build
      - name: Package
        run: cmake --build build --target package
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mingw${{ matrix.arch }}
          path: build/lmms-*.exe
      - name: Trim ccache and print statistics
        run: |
          ccache --cleanup
          echo "[ccache config]"
          ccache --print-config
          echo "[ccache stats]"
          ccache --show-stats
        env:
          CCACHE_MAXSIZE: 500M
  msvc:
    strategy:
      fail-fast: false
      matrix:
        arch: ['x86', 'x64']
    name: msvc-${{ matrix.arch }}
    runs-on: windows-2019
    env:
      CCACHE_MAXSIZE: 0
      CCACHE_NOCOMPRESS: 1
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Cache vcpkg dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          key: vcpkg-${{ matrix.arch }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ matrix.arch }}-
          path: build\vcpkg_installed
      - name: Cache ccache data
        uses: actions/cache@v3
        with:
          key: "ccache-${{ github.job }}-${{ matrix.arch }}-${{ github.ref }}\
            -${{ github.run_id }}"
          restore-keys: |
            ccache-${{ github.job }}-${{ matrix.arch }}-${{ github.ref }}-
            ccache-${{ github.job }}-${{ matrix.arch }}-
          path: ~\AppData\Local\ccache
      - name: Install tools
        run: choco install ccache
      - name: Install Qt
        uses: jurplel/install-qt-action@b3ea5275e37b734d027040e2c7fe7a10ea2ef946
        with:
          version: '5.15.2'
          arch: |-
            ${{
              fromJSON('
                {
                  "x86": "win32_msvc2019",
                  "x64": "win64_msvc2019_64"
                }
              ')[matrix.arch]
            }}
          archives: qtbase qtsvg qttools
          cache: true
      - name: Set up build environment
        uses: ilammy/msvc-dev-cmd@cec98b9d092141f74527d0afa6feb2af698cfe89
        with:
          arch: ${{ matrix.arch }}
      - name: Configure
        run: |
          ccache --zero-stats
          mkdir build -Force
          cmake -S . `
            -B build `
            -G Ninja `
            --toolchain C:/vcpkg/scripts/buildsystems/vcpkg.cmake `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DUSE_COMPILE_CACHE=ON `
            -DVCPKG_TARGET_TRIPLET="${{ matrix.arch }}-windows" `
            -DVCPKG_HOST_TRIPLET="${{ matrix.arch }}-windows" `
            -DVCPKG_MANIFEST_INSTALL="${{ env.should_install_manifest }}"
        env:
          should_install_manifest:
            ${{ steps.cache-deps.outputs.cache-hit == 'true' && 'NO' || 'YES' }}
      - name: Build
        run: cmake --build build
      - name: Run tests
        run: |
          cd build/tests
          ctest --output-on-failure -j2
      - name: Package
        run: cmake --build build --target package
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: msvc-${{ matrix.arch }}
          path: build\lmms-*.exe
      - name: Trim ccache and print statistics
        run: |
          ccache --cleanup
          echo "[ccache config]"
          ccache --show-config
          echo "[ccache stats]"
          ccache --show-stats --verbose
        env:
          CCACHE_MAXSIZE: 500MB
