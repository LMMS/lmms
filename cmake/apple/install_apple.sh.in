#!/bin/bash
# Creates Apple ".app" bundle for @PROJECT_NAME_UCASE@
# Note:
#   Examine linkings using `otool -L somelib.so`
#   Debug the loading of dynamic libraries using `export DYLD_PRINT_LIBRARIES=1`

set -e

# Place to create ".app" bundle
APP="@CMAKE_BINARY_DIR@/@PROJECT_NAME_UCASE@.app"

MSG_COLOR='\x1B[1;36m'
COLOR_RESET='\x1B[0m'
echo -e "$MSG_COLOR\n\nCreating App Bundle \"$APP\"...$COLOR_RESET"

qtpath="$(dirname "@QT_QMAKE_EXECUTABLE@")"
export PATH="$PATH:$qtpath"

# Remove any old .app bundles
rm -Rf "$APP"

# Copy/overwrite Info.plist
command cp  "@CMAKE_BINARY_DIR@/Info.plist" "@CMAKE_INSTALL_PREFIX@/"

# Create .app bundle containing contents from CMAKE_INSTALL_PREFIX
mkdir -p "$APP/Contents/MacOS"
mkdir -p "$APP/Contents/Frameworks"
mkdir -p "$APP/Contents/Resources"
cd "@CMAKE_INSTALL_PREFIX@"
cp -R ./* "$APP/Contents"
cp "@CMAKE_SOURCE_DIR@/cmake/apple/"*.icns "$APP/Contents/Resources/"

# Make all libraries writable for macdeployqt
cd "$APP"
find . -type f -print0 | xargs -0 chmod u+w

lmmsbin="MacOS/@CMAKE_PROJECT_NAME@"
zynbin="MacOS/RemoteZynAddSubFx"

# Move lmms binary
mv "$APP/Contents/bin/@CMAKE_PROJECT_NAME@" "$APP/Contents/$lmmsbin"

# Fix zyn linking
mv "$APP/Contents/lib/lmms/RemoteZynAddSubFx" "$APP/Contents/$zynbin"
  
# Replace @rpath with @loader_path for Carla
# See also plugins/CarlaBase/CMakeLists.txt
# This MUST be done BEFORE calling macdeployqt
install_name_tool -change @rpath/libcarlabase.dylib \
   @loader_path/libcarlabase.dylib \
  "$APP/Contents/lib/lmms/libcarlapatchbay.so"

install_name_tool -change @rpath/libcarlabase.dylib \
  @loader_path/libcarlabase.dylib \
  "$APP/Contents/lib/lmms/libcarlarack.so"

# Link lmms binary
_executables="${_executables} -executable=$APP/Contents/$zynbin"

# Build a list of shared objects in target/lib/lmms
for file in "$APP/Contents/lib/lmms/"*.so; do
   _thisfile="$APP/Contents/lib/lmms/${file##*/}"
   _executables="${_executables} -executable=$_thisfile"
done

# Build a list of shared objects in target/lib/lmms/ladspa
for file in "$APP/Contents/lib/lmms/ladspa/"*.so; do
   _thisfile="$APP/Contents/lib/lmms/ladspa/${file##*/}"
   _executables="${_executables} -executable=$_thisfile"
done

# Finalize .app
# shellcheck disable=SC2086
macdeployqt "$APP" $_executables

# Carla is a standalone plugin.  Remove library, look for it side-by-side LMMS.app
# This MUST be done AFTER calling macdeployqt
#
# For example:
#    /Applications/LMMS.app
#    /Applications/Carla.app
carlalibs=$(echo "@CARLA_LIBRARIES@"|tr ";" "\n")

# Loop over all libcarlas, fix linking
for file in "$APP/Contents/lib/lmms/"libcarla*; do
   _thisfile="$APP/Contents/lib/lmms/${file##*/}"
   for lib in $carlalibs; do
     _oldpath="../../Frameworks/lib${lib}.dylib"
     _newpath="Carla.app/Contents/MacOS/lib${lib}.dylib"
     # shellcheck disable=SC2086
     install_name_tool -change @loader_path/$_oldpath \
       @executable_path/../../../$_newpath \
       "$_thisfile"
     rm -f "$APP/Contents/Frameworks/lib${lib}.dylib"
   done
done

# Attempts to fix a "Frameworks" library which uses @loader_path instead of
# @executable_path.  Despite the function parameter using a the system library
# location, this will only attempt to repair the matching filename in the app
# bundle.
#
# See also: https://github.com/LMMS/lmms/issues/7244
#
# Usage:
#    fix_linking "@SndFile_LIBRARY@"
#
fix_framework() {
    sys_lib="$1"

    # Sadly, the lib names are inconsistent (e.g. foo.1.2.3.dylib vs foo.1.dylib ).  Use globbing to guess.
    lib_name=$(basename "$1")
    # Remove file extension
    match=$(echo "$lib_name" | cut -d "." -f1 )
    # Hope there's only one match
    # shellcheck disable=SC2086
    app_lib="$(ls "$APP/Contents/Frameworks/"$match*.dylib)"
    otool_lines="$(otool -L "$app_lib")"

    is_debug=0
    is_fixed=0
    while IFS= read -r line; do
        # Trim off trailing "... (compatiblity version...""
        rpath_orig=$(echo "$line" | cut -d "(" -f 1 | xargs)
        if [[ $rpath_orig == *"@loader_path/"* ]]; then
            # Isolate dependency lib name (xargs removes trailing whitespace)
            dep_lib="$(echo "$rpath_orig" | rev | cut -d "/" -f 1 | rev | xargs)"
            if [ $is_debug -eq 1 ]; then
                echo "-- Fixing $(basename "$1") @loader_path entry for $dep_lib..."
            fi
            rpath_new="@executable_path/../Frameworks/$dep_lib"
            app_lib_dep="$APP/Contents/Frameworks/$dep_lib"
            if ! test -f "$app_lib_dep"; then
                # Assuming any missing files can be found adjacent
                sys_lib_dep="$(dirname "$sys_lib")/$dep_lib"
                cp "$sys_lib_dep" "$app_lib_dep"
            fi
            install_name_tool -change "$rpath_orig" "$rpath_new" "$app_lib" 2>/dev/null
            is_fixed=1
        fi
    done <<< "$otool_lines"

    if [ $is_debug -eq 1 ] && [ $is_fixed -eq 1 ]; then
        echo -e "\nBEFORE/AFTER:"
        # diff returns non-zero exit code
        diff -u --color=always <(echo "$otool_lines" ) <(otool -L "$app_lib") || true
    fi
}

fix_framework "@SndFile_LIBRARY@"

# Cleanup
rm -rf "$APP/Contents/bin"

# Codesign
codesign --force --deep --sign - "$APP"

echo -e "\nFinished.\n\n"
