#!/usr/bin/env bash
# Creates Linux ".AppImage" for @PROJECT_NAME_UCASE@

set -e

# Console colors
RED="\\x1B[1;31m"
GREEN="\\x1B[1;32m"
YELLOW="\\x1B[1;33m"
PLAIN="\\x1B[0m"

LINUXDEPLOYQT="$HOME/bin/linuxdeployqt"
APPDIR="@CMAKE_BINARY_DIR@/@PROJECT_NAME_UCASE@.AppDir/"
DESKTOPFILE="${APPDIR}usr/share/applications/lmms.desktop"

mkdir -p "$HOME/bin"

# Assumes there's a version of linuxdeployqt for your architecture
# If this assumption is wrong:
#  sudo apt-get install autoconf
#  Compile linuxdeployqt
#  cd ~ && git clone https://github.com/probonopd/linuxdeployqt && cd linuxdeployqt && qmake && make && mv bin/linuxdeployqt ~/bin/
#  Download appimagekit
#  wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$(uname -p).AppImage" -O ~/bin/appimagetool && chmod +x ~/bin/appimagetool
#  Compile patchelf
#  cd ~ && git clone https://github.com/NixOS/patchelf && ./bootstrap.sh && ./configure && make && mv src/patchelf ~/bin/

echo -e "${GREEN}Downloading linuxdeployqt to ${LINUXDEPLOYQT}${PLAIN}..."
# Fetch portable linuxdeployqt if cache is older than 10 days
if which linuxdeployqt > /dev/null d2>&1; then
	echo "     [skipping] The system already provides this utility"
elif ! find "$LINUXDEPLOYQT" -mtime -10  > /dev/null 2>&1; then
	url="https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-$(uname -p).AppImage"
	echo "     Trying ($(uname -p)): ${url}"
	wget "$url" -O "$LINUXDEPLOYQT" -q || (rm "$LINUXDEPLOYQT" && false)
	chmod +x "$LINUXDEPLOYQT"
	echo "     [success]"
else
	echo "     [skipping] Downloaded version is less than 10 days old"
fi

# Make skeleton AppDir
echo -e "${GREEN}Creating ${APPDIR}...${PLAIN}"
rm -rf "$APPDIR"
# FIXME
#shellcheck disable=SC2203
rm -f "@CMAKE_BINARY_DIR@/*.AppImage"
mkdir -p "$APPDIR/usr"
echo "     [success]"

# Clone install to AppDir
echo -e "${GREEN}Copying @CMAKE_INSTALL_PREFIX@ to ${APPDIR}...${PLAIN}"
cp -R "@CMAKE_INSTALL_PREFIX@/." "$APPDIR/usr"

# Create a wrapper script which calls the lmms executable
mv "$APPDIR/usr/bin/lmms" "$APPDIR/usr/bin/lmms.real"
echo "     [success]"

# Ensure linuxdeployqt can find shared objects
export LD_LIBRARY_PATH="${APPDIR}usr/lib/lmms/":$LD_LIBRARY_PATH

# Ensure linuxdeployqt can properly relink additional executables
ZYNLIB="$APPDIR/usr/lib/lmms/RemoteZynAddSubFx"
VSTLIB="$APPDIR/usr/lib/lmms/RemoteVstPlugin.exe.so"

VSTBIN="$APPDIR/usr/bin/RemoteVstPlugin.exe.so"
ZYNBIN="$APPDIR/usr/bin/RemoteZynAddSubFx"

# Temporarily move executables to linuxdeployqt-friendly location
mv "$ZYNLIB" "$ZYNBIN"
mv "$VSTLIB" "$VSTBIN"

# Patch the desktop file
sed -i 's/.*Exec=.*/Exec=lmms.real/' "$DESKTOPFILE"

echo -e "${GREEN}Bundling dependencies...${PLAIN}"
# Bundle both qt and non-qt dependencies into appimage format
"$LINUXDEPLOYQT" "$DESKTOPFILE" -executable="$ZYNBIN" -executable="$VSTBIN" -bundle-non-qt-libs
echo "     [success]"

# Per https://github.com/probonopd/linuxdeployqt/issues/145
# cp "${DATA_DIR}/icons/hicolor/scalable/apps/lmms.svg" "${APPDIR}"

# Create the AppRun launcher stub
echo "#!/usr/bin/env bash
DIR=\"\$( cd \"\$( dirname \"\${BASH_SOURCE[0]}\" )\" && pwd )\"
export LD_LIBRARY_PATH=\$DIR/usr/lib:\$DIR/usr/lib/lmms/:\$LD_LIBRARY_PATH
QT_X11_NO_NATIVE_MENUBAR=1 \$DIR/usr/bin/lmms.real \"\$@\"" > "${APPDIR}usr/bin/lmms"
chmod +x "${APPDIR}usr/bin/lmms"

# Restore executables' location
mv "$ZYNBIN" "$ZYNLIB"
mv "$VSTBIN" "$VSTLIB"

echo -e "${GREEN}Finishing the AppImage...${PLAIN}"
# Run a second time with appimage to create AppImage
"$LINUXDEPLOYQT" "$DESKTOPFILE" -appimage
echo "     [success]"

echo -e "${GREEN}Moving to @APPIMAGE_FILE@...${PLAIN}"
# FIXME
#shellcheck disable=SC2203
mv *.AppImage "@APPIMAGE_FILE@"

echo -e "${GREEN}Finished${PLAIN}"
