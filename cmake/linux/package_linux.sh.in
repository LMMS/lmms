#!/usr/bin/env bash
# Creates Linux ".AppImage" for @PROJECT_NAME_UCASE@
#
# Depends:  linuxdeployqt
#
# Notes:    Will attempt to fetch linuxdeployqt automatically (x86_64 only)
#           See Also: https://github.com/probonopd/linuxdeployqt/blob/master/BUILDING.md

set -e

LINUXDEPLOYQT="$HOME/bin/linuxdeployqt"
VERBOSITY=2 # 3=debug
LOGFILE="@CMAKE_BINARY_DIR@/linuxdeployqt.log"
APPDIR="@CMAKE_BINARY_DIR@/@PROJECT_NAME_UCASE@.AppDir/"
DESKTOPFILE="${APPDIR}usr/share/applications/lmms.desktop"
STRIP=""

# Don't strip for Debug|RelWithDebInfo builds
if [[ "@CMAKE_BUILD_TYPE@" == *"Deb"* ]]; then
	STRIP="-no-strip"
fi

# Console colors
RED="\\x1B[1;31m"
GREEN="\\x1B[1;32m"
YELLOW="\\x1B[1;33m"
PLAIN="\\x1B[0m"

function error {
	echo -e "   ${PLAIN}[${RED}error${PLAIN}] ${1}"
	return 1
}

function success {
	echo -e "   ${PLAIN}[${GREEN}success${PLAIN}] ${1}"
}

function skipped {
	echo -e "   ${PLAIN}[${YELLOW}skipped${PLAIN}] ${1}"
}


# Check for problematic install locations
INSTALL=$(echo "@CMAKE_INSTALL_PREFIX@" | sed 's/\/*$//g')
if [ "$INSTALL" == "/usr/local" ] || [ "$INSTALL" == "/usr" ] ; then
	error "Incompatible CMAKE_INSTALL_PREFIX for creating AppImage: @CMAKE_INSTALL_PREFIX@"
fi

echo -e "\nWriting verbose output to \"${LOGFILE}\""

# Fetch portable linuxdeployqt if cache is older than $DAYSOLD
echo -e "\nDownloading linuxdeployqt to ${LINUXDEPLOYQT}..."
mkdir -p "$HOME/bin"
DAYSOLD=2
if env -i which linuxdeployqt > /dev/null 2>&1; then
	skipped "System already provides this utility"
elif ! find "$LINUXDEPLOYQT" -mtime -$DAYSOLD 2>/dev/null|grep -q "." > /dev/null 2>&1; then
	url="https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-$(uname -p).AppImage"
	echo "   [.......] Couldn't find linuxdeployqt newer than $DAYSOLD days old"
	echo "   [.......] Downloading ($(uname -p)): ${url}"
	wget "$url" -O "$LINUXDEPLOYQT" -q || (rm "$LINUXDEPLOYQT" && false)
	chmod +x "$LINUXDEPLOYQT"
	touch "$LINUXDEPLOYQT"
	success "Downloaded $LINUXDEPLOYQT"
else
	skipped "$LINUXDEPLOYQT is less than $DAYSOLD days old"
fi

# Make skeleton AppDir
echo -e "\nCreating ${APPDIR}..."
rm -rf "$APPDIR"
mkdir -p "$APPDIR/usr"
success "Created ${APPDIR}"

# Clone install to AppDir
echo -e "\nCopying @CMAKE_INSTALL_PREFIX@ to ${APPDIR}..."
cp -R "@CMAKE_INSTALL_PREFIX@/." "$APPDIR/usr"
rm -rf "$APPDIR/usr/include"
success "${APPDIR}"

# Create a wrapper script which calls the lmms executable
mv "$APPDIR/usr/bin/lmms" "$APPDIR/usr/bin/lmms.real"
# shellcheck disable=SC1083
cat >"${APPDIR}usr/bin/lmms" <<EOL
#!/usr/bin/env bash
DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
export LD_LIBRARY_PATH=\$DIR/usr/lib:\$DIR/usr/lib/lmms/:\$LD_LIBRARY_PATH
# Prevent segfault on VirualBox
if lsmod |grep vboxguest > /dev/null 2>&1; then
   echo "VirtualBox detected.  Forcing libgl software rendering."
   export LIBGL_ALWAYS_SOFTWARE=1;
fi
QT_X11_NO_NATIVE_MENUBAR=1 \$DIR/usr/bin/lmms.real "\$@"
EOL

chmod +x "${APPDIR}usr/bin/lmms"

# Per https://github.com/probonopd/linuxdeployqt/issues/129 
unset LD_LIBRARY_PATH

# Ensure linuxdeployqt can find shared objects
export LD_LIBRARY_PATH="${APPDIR}usr/lib/lmms/":$LD_LIBRARY_PATH

# Executables in the lib directory
ZYNLIB="$APPDIR/usr/lib/lmms/RemoteZynAddSubFx"
VSTLIB="$APPDIR/usr/lib/lmms/RemoteVstPlugin.exe.so"

# Temporarily move executables
VSTBIN="$APPDIR/usr/bin/RemoteVstPlugin.exe.so"
ZYNBIN="$APPDIR/usr/bin/RemoteZynAddSubFx"
mv "$ZYNLIB" "$ZYNBIN"
mv "$VSTLIB" "$VSTBIN"

# Patch the desktop file
sed -i 's/.*Exec=.*/Exec=lmms.real/' "$DESKTOPFILE"

# Bundle both qt and non-qt dependencies into appimage format
echo -e "\nBundling and relinking system dependencies..."
echo -e "#### linuxdeployqt pass 1 ####" > "$LOGFILE"
"$LINUXDEPLOYQT" "$DESKTOPFILE" -executable="$ZYNBIN" -executable="$VSTBIN" -bundle-non-qt-libs -verbose=$VERBOSITY $STRIP >> "$LOGFILE" 2>&1
success "Bundled and relinked dependencies"

# Create relative symbolic link to original location
ln -sr "$ZYNBIN" "$ZYNLIB"
ln -sr "$VSTBIN" "$VSTLIB"

# Run a second time to create AppImage
echo -e "\nFinishing the AppImage..."
echo -e "\n\n#### linuxdeployqt pass 2 ####" > "$LOGFILE"
"$LINUXDEPLOYQT" "$DESKTOPFILE" -appimage -verbose=$VERBOSITY $STRIP >> "$LOGFILE" 2>&1
success "Created .AppImage"

echo -e "\nMoving to @APPIMAGE_FILE@..."
# FIXME
# Per https://github.com/probonopd/linuxdeployqt/issues/146
mv ./*.AppImage "@APPIMAGE_FILE@"
success "Created @APPIMAGE_FILE@"

echo -e "\nFinished"
